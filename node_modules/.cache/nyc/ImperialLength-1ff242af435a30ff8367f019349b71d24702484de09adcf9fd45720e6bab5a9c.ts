"use strict";function cov_2qz6wcalaf(){var path="/home/usuario/practicas/practica7PE103/practica7PE103/src/ejercicio1PE103_p7/ImperialLength.ts";var hash="fd9d5cff921771f120191e0cf19cfb7d9de0eed8";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/practicas/practica7PE103/practica7PE103/src/ejercicio1PE103_p7/ImperialLength.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:32}},"2":{start:{line:15,column:8},end:{line:15,column:28}},"3":{start:{line:22,column:8},end:{line:22,column:28}},"4":{start:{line:28,column:8},end:{line:28,column:27}},"5":{start:{line:35,column:8},end:{line:35,column:33}},"6":{start:{line:41,column:8},end:{line:41,column:32}},"7":{start:{line:48,column:8},end:{line:48,column:33}},"8":{start:{line:54,column:8},end:{line:54,column:32}},"9":{start:{line:61,column:8},end:{line:61,column:36}},"10":{start:{line:67,column:8},end:{line:67,column:35}},"11":{start:{line:70,column:0},end:{line:70,column:40}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:23},end:{line:16,column:5}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:24},end:{line:23,column:5}},line:21},"2":{name:"(anonymous_2)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:19},end:{line:29,column:5}},line:27},"3":{name:"(anonymous_3)",decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:20},end:{line:36,column:5}},line:34},"4":{name:"(anonymous_4)",decl:{start:{line:40,column:4},end:{line:40,column:5}},loc:{start:{line:40,column:15},end:{line:42,column:5}},line:40},"5":{name:"(anonymous_5)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:22},end:{line:49,column:5}},line:47},"6":{name:"(anonymous_6)",decl:{start:{line:53,column:4},end:{line:53,column:5}},loc:{start:{line:53,column:17},end:{line:55,column:5}},line:53},"7":{name:"(anonymous_7)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:22},end:{line:62,column:5}},line:60},"8":{name:"(anonymous_8)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:17},end:{line:68,column:5}},line:66}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{},inputSourceMap:{version:3,file:"/home/usuario/practicas/practica7PE103/practica7PE103/src/ejercicio1PE103_p7/ImperialLength.ts",sources:["/home/usuario/practicas/practica7PE103/practica7PE103/src/ejercicio1PE103_p7/ImperialLength.ts"],names:[],mappings:";;;AAAA;;;GAGG;AACH,MAAa,cAAc;IACf,MAAM,CAAS,CAAC,UAAU;IAClC;;;OAGG;IACH,YAAY,KAAa;QACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IACD;;;OAGG;IACH,YAAY,CAAC,KAAa;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IACD;;OAEG;IACH,YAAY;QACR,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAa;QAClB,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,KAAK,CAAC;IAC7B,CAAC;IACD;;OAEG;IACH,QAAQ;QACJ,OAAO,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,KAAa;QACpB,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,KAAK,CAAC;IAC7B,CAAC;IACD;;OAEG;IACH,UAAU;QACN,OAAO,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,KAAa;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC;IAChC,CAAC;IACD;;OAEG;IACH,UAAU;QACN,OAAO,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IAC/B,CAAC;CACJ;AAhED,wCAgEC",sourcesContent:["/**\n * Clase ImperialLength para convertir n\xFAmeros en el sistema imperial\n * @class\n */\nexport class ImperialLength{\n    private _valor: number; //Pulgadas\n    /**\n     * Constructor de ImperialLength\n     * @param valor Valor inicial en pulgadas de la clase\n     */\n    constructor(valor: number){\n        this._valor = valor;\n    }\n    /**\n     * Setter que pone el nuevo valor en la clase en pulgadas\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_pulgadas(nuevo: number){\n        this._valor = nuevo;\n    }\n    /**\n     * Getter que devuelve el valor en pulgadas\n     */\n    get_pulgadas(): number{\n        return this._valor;\n    }\n\n    /**\n     * Setter que pone el nuevo valor que lo transforma de pies a pulgadas\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_pies(nuevo: number){\n        this._valor = 12 * nuevo;\n    }\n    /**\n     * Getter que devuelve el valor de pulgadas a pies\n     */\n    get_pies(): number{\n        return this._valor / 12;\n    }\n\n    /**\n     * Setter que pone el nuevo valor que lo transforma de yardas a pulgadas\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_yardas(nuevo: number){\n        this._valor = 36 * nuevo;\n    }\n    /**\n     * Getter que devuelve el valor de pulgadas a yardas\n     */\n    get_yardas(): number{\n        return this._valor / 36;\n    }\n\n    /**\n     * Setter que pone el nuevo valor que lo transforma de millas a pulgadas\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_millas(nuevo: number){\n        this._valor = 63360 * nuevo;\n    }\n    /**\n     * Getter que devuelve el valor de pulgadas a millas\n     */\n    get_millas(): number{\n        return this._valor / 63360;\n    }\n}"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fd9d5cff921771f120191e0cf19cfb7d9de0eed8"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2qz6wcalaf=function(){return actualCoverage;};}return actualCoverage;}cov_2qz6wcalaf();cov_2qz6wcalaf().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2qz6wcalaf().s[1]++;exports.ImperialLength=void 0;/**
 * Clase ImperialLength para convertir números en el sistema imperial
 * @class
 */class ImperialLength{_valor;//Pulgadas
/**
     * Constructor de ImperialLength
     * @param valor Valor inicial en pulgadas de la clase
     */constructor(valor){cov_2qz6wcalaf().f[0]++;cov_2qz6wcalaf().s[2]++;this._valor=valor;}/**
     * Setter que pone el nuevo valor en la clase en pulgadas
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_pulgadas(nuevo){cov_2qz6wcalaf().f[1]++;cov_2qz6wcalaf().s[3]++;this._valor=nuevo;}/**
     * Getter que devuelve el valor en pulgadas
     */get_pulgadas(){cov_2qz6wcalaf().f[2]++;cov_2qz6wcalaf().s[4]++;return this._valor;}/**
     * Setter que pone el nuevo valor que lo transforma de pies a pulgadas
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_pies(nuevo){cov_2qz6wcalaf().f[3]++;cov_2qz6wcalaf().s[5]++;this._valor=12*nuevo;}/**
     * Getter que devuelve el valor de pulgadas a pies
     */get_pies(){cov_2qz6wcalaf().f[4]++;cov_2qz6wcalaf().s[6]++;return this._valor/12;}/**
     * Setter que pone el nuevo valor que lo transforma de yardas a pulgadas
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_yardas(nuevo){cov_2qz6wcalaf().f[5]++;cov_2qz6wcalaf().s[7]++;this._valor=36*nuevo;}/**
     * Getter que devuelve el valor de pulgadas a yardas
     */get_yardas(){cov_2qz6wcalaf().f[6]++;cov_2qz6wcalaf().s[8]++;return this._valor/36;}/**
     * Setter que pone el nuevo valor que lo transforma de millas a pulgadas
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_millas(nuevo){cov_2qz6wcalaf().f[7]++;cov_2qz6wcalaf().s[9]++;this._valor=63360*nuevo;}/**
     * Getter que devuelve el valor de pulgadas a millas
     */get_millas(){cov_2qz6wcalaf().f[8]++;cov_2qz6wcalaf().s[10]++;return this._valor/63360;}}cov_2qz6wcalaf().s[11]++;exports.ImperialLength=ImperialLength;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdXN1YXJpby9wcmFjdGljYXMvcHJhY3RpY2E3UEUxMDMvcHJhY3RpY2E3UEUxMDMvc3JjL2VqZXJjaWNpbzFQRTEwM19wNy9JbXBlcmlhbExlbmd0aC50cyIsInNvdXJjZXMiOlsiL2hvbWUvdXN1YXJpby9wcmFjdGljYXMvcHJhY3RpY2E3UEUxMDMvcHJhY3RpY2E3UEUxMDMvc3JjL2VqZXJjaWNpbzFQRTEwM19wNy9JbXBlcmlhbExlbmd0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7O0dBR0c7QUFDSCxNQUFhLGNBQWM7SUFDZixNQUFNLENBQVMsQ0FBQyxVQUFVO0lBQ2xDOzs7T0FHRztJQUNILFlBQVksS0FBYTtRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsWUFBWSxDQUFDLEtBQWE7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUNEOztPQUVHO0lBQ0gsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFDRDs7T0FFRztJQUNILFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxVQUFVLENBQUMsS0FBYTtRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUNEOztPQUVHO0lBQ0gsVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxLQUFhO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDO0NBQ0o7QUFoRUQsd0NBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDbGFzZSBJbXBlcmlhbExlbmd0aCBwYXJhIGNvbnZlcnRpciBuw7ptZXJvcyBlbiBlbCBzaXN0ZW1hIGltcGVyaWFsXG4gKiBAY2xhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIEltcGVyaWFsTGVuZ3Roe1xuICAgIHByaXZhdGUgX3ZhbG9yOiBudW1iZXI7IC8vUHVsZ2FkYXNcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBkZSBJbXBlcmlhbExlbmd0aFxuICAgICAqIEBwYXJhbSB2YWxvciBWYWxvciBpbmljaWFsIGVuIHB1bGdhZGFzIGRlIGxhIGNsYXNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmFsb3I6IG51bWJlcil7XG4gICAgICAgIHRoaXMuX3ZhbG9yID0gdmFsb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHRlciBxdWUgcG9uZSBlbCBudWV2byB2YWxvciBlbiBsYSBjbGFzZSBlbiBwdWxnYWRhc1xuICAgICAqIEBwYXJhbSBudWV2byBOw7ptZXJvIHF1ZSBxdWVyZW1vcyBxdWUgc2VhIGVsIG51ZXZvIHZhbG9yXG4gICAgICovXG4gICAgc2V0X3B1bGdhZGFzKG51ZXZvOiBudW1iZXIpe1xuICAgICAgICB0aGlzLl92YWxvciA9IG51ZXZvO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgcXVlIGRldnVlbHZlIGVsIHZhbG9yIGVuIHB1bGdhZGFzXG4gICAgICovXG4gICAgZ2V0X3B1bGdhZGFzKCk6IG51bWJlcntcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBxdWUgcG9uZSBlbCBudWV2byB2YWxvciBxdWUgbG8gdHJhbnNmb3JtYSBkZSBwaWVzIGEgcHVsZ2FkYXNcbiAgICAgKiBAcGFyYW0gbnVldm8gTsO6bWVybyBxdWUgcXVlcmVtb3MgcXVlIHNlYSBlbCBudWV2byB2YWxvclxuICAgICAqL1xuICAgIHNldF9waWVzKG51ZXZvOiBudW1iZXIpe1xuICAgICAgICB0aGlzLl92YWxvciA9IDEyICogbnVldm87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHRlciBxdWUgZGV2dWVsdmUgZWwgdmFsb3IgZGUgcHVsZ2FkYXMgYSBwaWVzXG4gICAgICovXG4gICAgZ2V0X3BpZXMoKTogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsb3IgLyAxMjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgcXVlIHBvbmUgZWwgbnVldm8gdmFsb3IgcXVlIGxvIHRyYW5zZm9ybWEgZGUgeWFyZGFzIGEgcHVsZ2FkYXNcbiAgICAgKiBAcGFyYW0gbnVldm8gTsO6bWVybyBxdWUgcXVlcmVtb3MgcXVlIHNlYSBlbCBudWV2byB2YWxvclxuICAgICAqL1xuICAgIHNldF95YXJkYXMobnVldm86IG51bWJlcil7XG4gICAgICAgIHRoaXMuX3ZhbG9yID0gMzYgKiBudWV2bztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0dGVyIHF1ZSBkZXZ1ZWx2ZSBlbCB2YWxvciBkZSBwdWxnYWRhcyBhIHlhcmRhc1xuICAgICAqL1xuICAgIGdldF95YXJkYXMoKTogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsb3IgLyAzNjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgcXVlIHBvbmUgZWwgbnVldm8gdmFsb3IgcXVlIGxvIHRyYW5zZm9ybWEgZGUgbWlsbGFzIGEgcHVsZ2FkYXNcbiAgICAgKiBAcGFyYW0gbnVldm8gTsO6bWVybyBxdWUgcXVlcmVtb3MgcXVlIHNlYSBlbCBudWV2byB2YWxvclxuICAgICAqL1xuICAgIHNldF9taWxsYXMobnVldm86IG51bWJlcil7XG4gICAgICAgIHRoaXMuX3ZhbG9yID0gNjMzNjAgKiBudWV2bztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0dGVyIHF1ZSBkZXZ1ZWx2ZSBlbCB2YWxvciBkZSBwdWxnYWRhcyBhIG1pbGxhc1xuICAgICAqL1xuICAgIGdldF9taWxsYXMoKTogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsb3IgLyA2MzM2MDtcbiAgICB9XG59Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnF6NndjYWxhZiIsImFjdHVhbENvdmVyYWdlIiwicyIsIkltcGVyaWFsTGVuZ3RoIiwiX3ZhbG9yIiwiY29uc3RydWN0b3IiLCJ2YWxvciIsImYiLCJzZXRfcHVsZ2FkYXMiLCJudWV2byIsImdldF9wdWxnYWRhcyIsInNldF9waWVzIiwiZ2V0X3BpZXMiLCJzZXRfeWFyZGFzIiwiZ2V0X3lhcmRhcyIsInNldF9taWxsYXMiLCJnZXRfbWlsbGFzIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9ob21lL3VzdWFyaW8vcHJhY3RpY2FzL3ByYWN0aWNhN1BFMTAzL3ByYWN0aWNhN1BFMTAzL3NyYy9lamVyY2ljaW8xUEUxMDNfcDcvSW1wZXJpYWxMZW5ndGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDbGFzZSBJbXBlcmlhbExlbmd0aCBwYXJhIGNvbnZlcnRpciBuw7ptZXJvcyBlbiBlbCBzaXN0ZW1hIGltcGVyaWFsXG4gKiBAY2xhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIEltcGVyaWFsTGVuZ3Roe1xuICAgIHByaXZhdGUgX3ZhbG9yOiBudW1iZXI7IC8vUHVsZ2FkYXNcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBkZSBJbXBlcmlhbExlbmd0aFxuICAgICAqIEBwYXJhbSB2YWxvciBWYWxvciBpbmljaWFsIGVuIHB1bGdhZGFzIGRlIGxhIGNsYXNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmFsb3I6IG51bWJlcil7XG4gICAgICAgIHRoaXMuX3ZhbG9yID0gdmFsb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHRlciBxdWUgcG9uZSBlbCBudWV2byB2YWxvciBlbiBsYSBjbGFzZSBlbiBwdWxnYWRhc1xuICAgICAqIEBwYXJhbSBudWV2byBOw7ptZXJvIHF1ZSBxdWVyZW1vcyBxdWUgc2VhIGVsIG51ZXZvIHZhbG9yXG4gICAgICovXG4gICAgc2V0X3B1bGdhZGFzKG51ZXZvOiBudW1iZXIpe1xuICAgICAgICB0aGlzLl92YWxvciA9IG51ZXZvO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgcXVlIGRldnVlbHZlIGVsIHZhbG9yIGVuIHB1bGdhZGFzXG4gICAgICovXG4gICAgZ2V0X3B1bGdhZGFzKCk6IG51bWJlcntcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBxdWUgcG9uZSBlbCBudWV2byB2YWxvciBxdWUgbG8gdHJhbnNmb3JtYSBkZSBwaWVzIGEgcHVsZ2FkYXNcbiAgICAgKiBAcGFyYW0gbnVldm8gTsO6bWVybyBxdWUgcXVlcmVtb3MgcXVlIHNlYSBlbCBudWV2byB2YWxvclxuICAgICAqL1xuICAgIHNldF9waWVzKG51ZXZvOiBudW1iZXIpe1xuICAgICAgICB0aGlzLl92YWxvciA9IDEyICogbnVldm87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHRlciBxdWUgZGV2dWVsdmUgZWwgdmFsb3IgZGUgcHVsZ2FkYXMgYSBwaWVzXG4gICAgICovXG4gICAgZ2V0X3BpZXMoKTogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsb3IgLyAxMjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgcXVlIHBvbmUgZWwgbnVldm8gdmFsb3IgcXVlIGxvIHRyYW5zZm9ybWEgZGUgeWFyZGFzIGEgcHVsZ2FkYXNcbiAgICAgKiBAcGFyYW0gbnVldm8gTsO6bWVybyBxdWUgcXVlcmVtb3MgcXVlIHNlYSBlbCBudWV2byB2YWxvclxuICAgICAqL1xuICAgIHNldF95YXJkYXMobnVldm86IG51bWJlcil7XG4gICAgICAgIHRoaXMuX3ZhbG9yID0gMzYgKiBudWV2bztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0dGVyIHF1ZSBkZXZ1ZWx2ZSBlbCB2YWxvciBkZSBwdWxnYWRhcyBhIHlhcmRhc1xuICAgICAqL1xuICAgIGdldF95YXJkYXMoKTogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsb3IgLyAzNjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgcXVlIHBvbmUgZWwgbnVldm8gdmFsb3IgcXVlIGxvIHRyYW5zZm9ybWEgZGUgbWlsbGFzIGEgcHVsZ2FkYXNcbiAgICAgKiBAcGFyYW0gbnVldm8gTsO6bWVybyBxdWUgcXVlcmVtb3MgcXVlIHNlYSBlbCBudWV2byB2YWxvclxuICAgICAqL1xuICAgIHNldF9taWxsYXMobnVldm86IG51bWJlcil7XG4gICAgICAgIHRoaXMuX3ZhbG9yID0gNjMzNjAgKiBudWV2bztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0dGVyIHF1ZSBkZXZ1ZWx2ZSBlbCB2YWxvciBkZSBwdWxnYWRhcyBhIG1pbGxhc1xuICAgICAqL1xuICAgIGdldF9taWxsYXMoKTogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsb3IgLyA2MzM2MDtcbiAgICB9XG59Il0sIm1hcHBpbmdzIjoiaWpMQVlLO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQUFBQSxjQUFBLEdBQUFFLENBQUEsTSwrR0FaTDs7O0dBSUEsS0FBYSxDQUFBQyxjQUFjLENBQ2ZDLE1BQU0sQ0FBVTtBQUN4Qjs7O09BSUFDLFlBQVlDLEtBQWEsRUFBQU4sY0FBQSxHQUFBTyxDQUFBLE1BQUFQLGNBQUEsR0FBQUUsQ0FBQSxNQUNyQixJQUFJLENBQUNFLE1BQU0sQ0FBR0UsS0FBSyxDQUN2QixDQUNBOzs7T0FJQUUsWUFBWUEsQ0FBQ0MsS0FBYSxFQUFBVCxjQUFBLEdBQUFPLENBQUEsTUFBQVAsY0FBQSxHQUFBRSxDQUFBLE1BQ3RCLElBQUksQ0FBQ0UsTUFBTSxDQUFHSyxLQUFLLENBQ3ZCLENBQ0E7O09BR0FDLFlBQVlBLENBQUEsRUFBQVYsY0FBQSxHQUFBTyxDQUFBLE1BQUFQLGNBQUEsR0FBQUUsQ0FBQSxNQUNSLE1BQU8sS0FBSSxDQUFDRSxNQUFNLENBQ3RCLENBRUE7OztPQUlBTyxRQUFRQSxDQUFDRixLQUFhLEVBQUFULGNBQUEsR0FBQU8sQ0FBQSxNQUFBUCxjQUFBLEdBQUFFLENBQUEsTUFDbEIsSUFBSSxDQUFDRSxNQUFNLENBQUcsRUFBRSxDQUFHSyxLQUFLLENBQzVCLENBQ0E7O09BR0FHLFFBQVFBLENBQUEsRUFBQVosY0FBQSxHQUFBTyxDQUFBLE1BQUFQLGNBQUEsR0FBQUUsQ0FBQSxNQUNKLE1BQU8sS0FBSSxDQUFDRSxNQUFNLENBQUcsRUFBRSxDQUMzQixDQUVBOzs7T0FJQVMsVUFBVUEsQ0FBQ0osS0FBYSxFQUFBVCxjQUFBLEdBQUFPLENBQUEsTUFBQVAsY0FBQSxHQUFBRSxDQUFBLE1BQ3BCLElBQUksQ0FBQ0UsTUFBTSxDQUFHLEVBQUUsQ0FBR0ssS0FBSyxDQUM1QixDQUNBOztPQUdBSyxVQUFVQSxDQUFBLEVBQUFkLGNBQUEsR0FBQU8sQ0FBQSxNQUFBUCxjQUFBLEdBQUFFLENBQUEsTUFDTixNQUFPLEtBQUksQ0FBQ0UsTUFBTSxDQUFHLEVBQUUsQ0FDM0IsQ0FFQTs7O09BSUFXLFVBQVVBLENBQUNOLEtBQWEsRUFBQVQsY0FBQSxHQUFBTyxDQUFBLE1BQUFQLGNBQUEsR0FBQUUsQ0FBQSxNQUNwQixJQUFJLENBQUNFLE1BQU0sQ0FBRyxLQUFLLENBQUdLLEtBQUssQ0FDL0IsQ0FDQTs7T0FHQU8sVUFBVUEsQ0FBQSxFQUFBaEIsY0FBQSxHQUFBTyxDQUFBLE1BQUFQLGNBQUEsR0FBQUUsQ0FBQSxPQUNOLE1BQU8sS0FBSSxDQUFDRSxNQUFNLENBQUcsS0FBSyxDQUM5QixDLENBQ0hKLGNBQUEsR0FBQUUsQ0FBQSxPQWhFRGUsT0FBQSxDQUFBZCxjQUFBLENBQUFBLGNBQUEsQyJ9