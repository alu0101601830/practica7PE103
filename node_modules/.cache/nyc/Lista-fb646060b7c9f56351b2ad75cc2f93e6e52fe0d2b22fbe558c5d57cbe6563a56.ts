"use strict";function cov_2rb7x51wg(){var path="/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicio-2/Lista.ts";var hash="1f893863be8429663d814dccc31c37fc7d4a17ed";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicio-2/Lista.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:23}},"2":{start:{line:15,column:8},end:{line:15,column:36}},"3":{start:{line:21,column:8},end:{line:21,column:31}},"4":{start:{line:28,column:21},end:{line:28,column:24}},"5":{start:{line:29,column:8},end:{line:33,column:9}},"6":{start:{line:29,column:21},end:{line:29,column:22}},"7":{start:{line:30,column:12},end:{line:30,column:41}},"8":{start:{line:31,column:12},end:{line:32,column:30}},"9":{start:{line:32,column:16},end:{line:32,column:30}},"10":{start:{line:34,column:8},end:{line:34,column:28}},"11":{start:{line:42,column:8},end:{line:42,column:38}},"12":{start:{line:49,column:23},end:{line:49,column:36}},"13":{start:{line:50,column:8},end:{line:52,column:9}},"14":{start:{line:50,column:21},end:{line:50,column:22}},"15":{start:{line:51,column:12},end:{line:51,column:57}},"16":{start:{line:60,column:8},end:{line:62,column:9}},"17":{start:{line:61,column:12},end:{line:61,column:31}},"18":{start:{line:63,column:8},end:{line:63,column:20}},"19":{start:{line:71,column:27},end:{line:71,column:40}},"20":{start:{line:72,column:8},end:{line:76,column:9}},"21":{start:{line:72,column:21},end:{line:72,column:22}},"22":{start:{line:73,column:29},end:{line:73,column:40}},"23":{start:{line:74,column:12},end:{line:75,column:57}},"24":{start:{line:75,column:16},end:{line:75,column:57}},"25":{start:{line:77,column:8},end:{line:77,column:26}},"26":{start:{line:84,column:16},end:{line:84,column:17}},"27":{start:{line:85,column:8},end:{line:87,column:9}},"28":{start:{line:86,column:12},end:{line:86,column:16}},"29":{start:{line:88,column:8},end:{line:88,column:17}},"30":{start:{line:96,column:27},end:{line:96,column:40}},"31":{start:{line:97,column:8},end:{line:99,column:9}},"32":{start:{line:97,column:21},end:{line:97,column:22}},"33":{start:{line:98,column:12},end:{line:98,column:65}},"34":{start:{line:100,column:8},end:{line:100,column:26}},"35":{start:{line:109,column:24},end:{line:109,column:34}},"36":{start:{line:110,column:8},end:{line:112,column:9}},"37":{start:{line:110,column:21},end:{line:110,column:22}},"38":{start:{line:111,column:12},end:{line:111,column:56}},"39":{start:{line:113,column:8},end:{line:113,column:25}},"40":{start:{line:120,column:27},end:{line:120,column:40}},"41":{start:{line:121,column:8},end:{line:123,column:9}},"42":{start:{line:121,column:21},end:{line:121,column:38}},"43":{start:{line:122,column:12},end:{line:122,column:56}},"44":{start:{line:124,column:8},end:{line:124,column:26}},"45":{start:{line:131,column:8},end:{line:134,column:9}},"46":{start:{line:131,column:21},end:{line:131,column:22}},"47":{start:{line:132,column:29},end:{line:132,column:40}},"48":{start:{line:133,column:12},end:{line:133,column:30}},"49":{start:{line:137,column:0},end:{line:137,column:22}},"50":{start:{line:138,column:13},end:{line:138,column:27}},"51":{start:{line:139,column:13},end:{line:139,column:30}},"52":{start:{line:140,column:13},end:{line:140,column:33}},"53":{start:{line:141,column:13},end:{line:141,column:36}},"54":{start:{line:142,column:13},end:{line:142,column:42}},"55":{start:{line:143,column:0},end:{line:143,column:22}},"56":{start:{line:144,column:0},end:{line:144,column:44}},"57":{start:{line:145,column:13},end:{line:145,column:29}},"58":{start:{line:146,column:0},end:{line:146,column:27}},"59":{start:{line:147,column:0},end:{line:147,column:49}},"60":{start:{line:148,column:0},end:{line:148,column:71}},"61":{start:{line:148,column:51},end:{line:148,column:68}},"62":{start:{line:149,column:0},end:{line:149,column:42}},"63":{start:{line:150,column:0},end:{line:150,column:60}},"64":{start:{line:150,column:45},end:{line:150,column:57}},"65":{start:{line:151,column:0},end:{line:151,column:92}},"66":{start:{line:151,column:65},end:{line:151,column:86}},"67":{start:{line:152,column:0},end:{line:152,column:44}},"68":{start:{line:153,column:0},end:{line:153,column:26}},"69":{start:{line:154,column:0},end:{line:156,column:3}},"70":{start:{line:155,column:4},end:{line:155,column:30}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:27},end:{line:16,column:5}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:20},end:{line:22,column:5}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:15},end:{line:35,column:5}},line:27},"3":{name:"(anonymous_3)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:16},end:{line:43,column:5}},line:41},"4":{name:"(anonymous_4)",decl:{start:{line:48,column:4},end:{line:48,column:5}},loc:{start:{line:48,column:18},end:{line:53,column:5}},line:48},"5":{name:"(anonymous_5)",decl:{start:{line:59,column:4},end:{line:59,column:5}},loc:{start:{line:59,column:24},end:{line:64,column:5}},line:59},"6":{name:"(anonymous_6)",decl:{start:{line:70,column:4},end:{line:70,column:5}},loc:{start:{line:70,column:22},end:{line:78,column:5}},line:70},"7":{name:"(anonymous_7)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:13},end:{line:89,column:5}},line:83},"8":{name:"(anonymous_8)",decl:{start:{line:95,column:4},end:{line:95,column:5}},loc:{start:{line:95,column:17},end:{line:101,column:5}},line:95},"9":{name:"(anonymous_9)",decl:{start:{line:108,column:4},end:{line:108,column:5}},loc:{start:{line:108,column:32},end:{line:114,column:5}},line:108},"10":{name:"(anonymous_10)",decl:{start:{line:119,column:4},end:{line:119,column:5}},loc:{start:{line:119,column:14},end:{line:125,column:5}},line:119},"11":{name:"(anonymous_11)",decl:{start:{line:130,column:4},end:{line:130,column:5}},loc:{start:{line:130,column:21},end:{line:135,column:5}},line:130},"12":{name:"(anonymous_12)",decl:{start:{line:148,column:39},end:{line:148,column:40}},loc:{start:{line:148,column:51},end:{line:148,column:68}},line:148},"13":{name:"(anonymous_13)",decl:{start:{line:150,column:33},end:{line:150,column:34}},loc:{start:{line:150,column:45},end:{line:150,column:57}},line:150},"14":{name:"(anonymous_14)",decl:{start:{line:151,column:39},end:{line:151,column:40}},loc:{start:{line:151,column:65},end:{line:151,column:86}},line:151},"15":{name:"(anonymous_15)",decl:{start:{line:154,column:15},end:{line:154,column:16}},loc:{start:{line:154,column:29},end:{line:156,column:1}},line:154}},branchMap:{"0":{loc:{start:{line:31,column:12},end:{line:32,column:30}},type:"if",locations:[{start:{line:31,column:12},end:{line:32,column:30}},{start:{line:31,column:12},end:{line:32,column:30}}],line:31},"1":{loc:{start:{line:74,column:12},end:{line:75,column:57}},type:"if",locations:[{start:{line:74,column:12},end:{line:75,column:57}},{start:{line:74,column:12},end:{line:75,column:57}}],line:74}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicio-2/Lista.ts",sources:["/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicio-2/Lista.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Clase Lista para tener una lista de cualquier tipo de datos\n * @class\n */\nexport class Lista<T> {\n    private _elementos: T[];\n    /**\n     * Constructor de Lista\n     * @param elementos Elementos de la lista\n     */\n    constructor(elementos: T[]) {\n        this._elementos = elementos;\n    }\n\n    /**\n     * Getter que devuelve los elementos de la lista\n     */\n    get elementos(): T[]{\n        return this._elementos;\n    }\n\n    /**\n     * Metodo para imprimir la lista\n     * @returns Devuelve una string con los elementos de la lista\n     */\n    toString(): string{\n        let result = \"[\"\n        for(let i = 0; i < this.length(); i++){\n            result += this._elementos[i]\n            if (i != this.length() - 1) result += \",\"\n        }\n        return result + \"]\";\n    }\n\n    /**\n     * M\xE9todo para devolver el elemento en el indice introducido\n     * @param indice Indice del array de elementos\n     * @returns Contenido de elemento[indice]\n     */\n    get(indice: number): T {\n        return this.elementos[indice];\n    }\n\n    /**\n     * M\xE9todo para anexar una lista al final de esta lista\n     * @param lista Lista para anexar\n     */\n    append(lista: Lista<T>): void {\n      let auxiliar = this.length()\n      for (let i = 0; i < lista.length(); i++) {\n        this._elementos[auxiliar + i] = lista.get(i)\n      }\n    }\n  \n    /**\n     * M\xE9todo para concatenar varias listas a esta lista\n     * @param listas Listas para anexar a esta lista\n     * @returns Esta lista con todas las listas anexadas\n     */\n    concatenate(listas: Lista<T>[]): Lista<T> {\n      for (const lista of listas) {\n        this.append(lista);\n      }\n      return this;\n    }\n\n    /**\n     * M\xE9todo para aplicar un predicado l\xF3gio a esta lista\n     * @param predicado Predicado l\xF3gico que debe de cumplir\n     * @returns Una lista con todos los elementos de la lista inicial para los cuales el predicado l\xF3gio es verdadero\n     */\n    filter(predicado: (elemento: T) => boolean): Lista<T> {\n      const nuevaLista = new Lista<T>([]);\n      for (let i = 0; i < this.length(); i++) {\n        const elemento = this.get(i);\n        if (predicado(elemento)) nuevaLista.append(new Lista<T>([elemento]));\n      }\n      return nuevaLista;\n    }\n    \n    /**\n     * M\xE9todo que devuelve la longitud de la lista\n     * @returns N\xFAmero con la longitud de la lista\n     */\n    length(): number{\n        let i = 0;\n        while (this.get(i) != null){\n            i++;\n        }\n        return i\n    }\n\n    /**\n     * Dada una lista y una funci\xF3n, retorna la lista resultante de aplicar a cada elemento de la lista inicial la funci\xF3n\n     * @param funcion Funci\xF3n que debe aplicarse\n     * @returns Lista resultante de aplicar a cada elemento de la lista inicial la funci\xF3n\n     */\n    map<U>(funcion: (elemento: T) => U): Lista<U> {\n      const nuevaLista = new Lista<U>([]);\n      for (let i = 0; i < this.length(); i++) {\n        nuevaLista.append(new Lista<U>([funcion(this.get(i))]));\n      }\n      return nuevaLista;\n    }\n  \n    /**\n     * M\xE9todo que dad una lista, una funci\xF3n y un acumulador inicial, reduce cada elemento al acumulador utilizando la funci\xF3n\n     * @param funcion Func\xF3n para aplicar a cada elemento\n     * @param acumulador Acumulador inicial\n     * @returns La lista resultante\n     */\n    reduce(funcion: (acumulador: T, elemento: T) => T, acumulador: T): T {\n      let resultado = acumulador;\n      for (let i = 0; i < this.length(); i++) {\n        resultado = funcion(resultado, this.get(i));\n      }\n      return resultado;\n    }\n  \n    /**\n     * M\xE9todo que revierte la lista\n     * @returns Lista revertida\n     */\n    reverse(): Lista<T> {\n      const nuevaLista = new Lista<T>([]);\n      for (let i = this.length() - 1; i >= 0; i--) {\n        nuevaLista.append(new Lista<T>([this.get(i)]));\n      }\n      return nuevaLista;\n    }\n\n    /**\n     * M\xE9todo que dad una lista y una funci\xF3n, permite iterar en los elementos de la lista e invocar la funci\xF3n con cada uno de ellos\n     * @param funcion Funci\xF3n aplicable en cada elemento\n     */\n    forEach(funcion: (elemento: T) => void): void {\n        for (let i = 0; i < this.length(); i++) {\n          const elemento = this.get(i);\n          funcion(elemento);\n        }\n    }\n      \n  }\n\n  let lista1 = new Lista<number>([1])\n  let lista2 = new Lista<number>([2,2])\n  let lista3 = new Lista<number>([3,3,3])\n  let lista4 = new Lista<number>([4,4,4,4])\n  let lista5 = new Lista<number>([1,2,3,4,5,6])\n  lista1.append(lista2)\n  console.log(\"Append: \"+lista1.toString())\n  let listas = [lista3, lista4]\n  lista2.concatenate(listas)\n  console.log(\"Concatenate: \"+lista2.toString())\n  console.log(\"Filter: \"+lista5.filter(elemento => elemento % 2 == 0))\n  console.log(\"Length: \"+lista4.length())\n  console.log(\"Map: \" + lista4.map(elemento => elemento/2))\n  console.log(\"Reduce: \" + lista5.reduce((acumulador, elemento) => acumulador + elemento, 0))\n  console.log(\"Reverse: \" + lista5.reverse())\n  console.log(\"For each: \")\n  lista5.forEach((elemento) => {\n    console.log(elemento * 2)\n  })"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1f893863be8429663d814dccc31c37fc7d4a17ed"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2rb7x51wg=function(){return actualCoverage;};}return actualCoverage;}cov_2rb7x51wg();cov_2rb7x51wg().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2rb7x51wg().s[1]++;exports.Lista=void 0;/**
 * Clase Lista para tener una lista de cualquier tipo de datos
 * @class
 */class Lista{_elementos;/**
     * Constructor de Lista
     * @param elementos Elementos de la lista
     */constructor(elementos){cov_2rb7x51wg().f[0]++;cov_2rb7x51wg().s[2]++;this._elementos=elementos;}/**
     * Getter que devuelve los elementos de la lista
     */get elementos(){cov_2rb7x51wg().f[1]++;cov_2rb7x51wg().s[3]++;return this._elementos;}/**
     * Metodo para imprimir la lista
     * @returns Devuelve una string con los elementos de la lista
     */toString(){cov_2rb7x51wg().f[2]++;let result=(cov_2rb7x51wg().s[4]++,"[");cov_2rb7x51wg().s[5]++;for(let i=(cov_2rb7x51wg().s[6]++,0);i<this.length();i++){cov_2rb7x51wg().s[7]++;result+=this._elementos[i];cov_2rb7x51wg().s[8]++;if(i!=this.length()-1){cov_2rb7x51wg().b[0][0]++;cov_2rb7x51wg().s[9]++;result+=",";}else{cov_2rb7x51wg().b[0][1]++;}}cov_2rb7x51wg().s[10]++;return result+"]";}/**
     * Método para devolver el elemento en el indice introducido
     * @param indice Indice del array de elementos
     * @returns Contenido de elemento[indice]
     */get(indice){cov_2rb7x51wg().f[3]++;cov_2rb7x51wg().s[11]++;return this.elementos[indice];}/**
     * Método para anexar una lista al final de esta lista
     * @param lista Lista para anexar
     */append(lista){cov_2rb7x51wg().f[4]++;let auxiliar=(cov_2rb7x51wg().s[12]++,this.length());cov_2rb7x51wg().s[13]++;for(let i=(cov_2rb7x51wg().s[14]++,0);i<lista.length();i++){cov_2rb7x51wg().s[15]++;this._elementos[auxiliar+i]=lista.get(i);}}/**
     * Método para concatenar varias listas a esta lista
     * @param listas Listas para anexar a esta lista
     * @returns Esta lista con todas las listas anexadas
     */concatenate(listas){cov_2rb7x51wg().f[5]++;cov_2rb7x51wg().s[16]++;for(const lista of listas){cov_2rb7x51wg().s[17]++;this.append(lista);}cov_2rb7x51wg().s[18]++;return this;}/**
     * Método para aplicar un predicado lógio a esta lista
     * @param predicado Predicado lógico que debe de cumplir
     * @returns Una lista con todos los elementos de la lista inicial para los cuales el predicado lógio es verdadero
     */filter(predicado){cov_2rb7x51wg().f[6]++;const nuevaLista=(cov_2rb7x51wg().s[19]++,new Lista([]));cov_2rb7x51wg().s[20]++;for(let i=(cov_2rb7x51wg().s[21]++,0);i<this.length();i++){const elemento=(cov_2rb7x51wg().s[22]++,this.get(i));cov_2rb7x51wg().s[23]++;if(predicado(elemento)){cov_2rb7x51wg().b[1][0]++;cov_2rb7x51wg().s[24]++;nuevaLista.append(new Lista([elemento]));}else{cov_2rb7x51wg().b[1][1]++;}}cov_2rb7x51wg().s[25]++;return nuevaLista;}/**
     * Método que devuelve la longitud de la lista
     * @returns Número con la longitud de la lista
     */length(){cov_2rb7x51wg().f[7]++;let i=(cov_2rb7x51wg().s[26]++,0);cov_2rb7x51wg().s[27]++;while(this.get(i)!=null){cov_2rb7x51wg().s[28]++;i++;}cov_2rb7x51wg().s[29]++;return i;}/**
     * Dada una lista y una función, retorna la lista resultante de aplicar a cada elemento de la lista inicial la función
     * @param funcion Función que debe aplicarse
     * @returns Lista resultante de aplicar a cada elemento de la lista inicial la función
     */map(funcion){cov_2rb7x51wg().f[8]++;const nuevaLista=(cov_2rb7x51wg().s[30]++,new Lista([]));cov_2rb7x51wg().s[31]++;for(let i=(cov_2rb7x51wg().s[32]++,0);i<this.length();i++){cov_2rb7x51wg().s[33]++;nuevaLista.append(new Lista([funcion(this.get(i))]));}cov_2rb7x51wg().s[34]++;return nuevaLista;}/**
     * Método que dad una lista, una función y un acumulador inicial, reduce cada elemento al acumulador utilizando la función
     * @param funcion Funcón para aplicar a cada elemento
     * @param acumulador Acumulador inicial
     * @returns La lista resultante
     */reduce(funcion,acumulador){cov_2rb7x51wg().f[9]++;let resultado=(cov_2rb7x51wg().s[35]++,acumulador);cov_2rb7x51wg().s[36]++;for(let i=(cov_2rb7x51wg().s[37]++,0);i<this.length();i++){cov_2rb7x51wg().s[38]++;resultado=funcion(resultado,this.get(i));}cov_2rb7x51wg().s[39]++;return resultado;}/**
     * Método que revierte la lista
     * @returns Lista revertida
     */reverse(){cov_2rb7x51wg().f[10]++;const nuevaLista=(cov_2rb7x51wg().s[40]++,new Lista([]));cov_2rb7x51wg().s[41]++;for(let i=(cov_2rb7x51wg().s[42]++,this.length()-1);i>=0;i--){cov_2rb7x51wg().s[43]++;nuevaLista.append(new Lista([this.get(i)]));}cov_2rb7x51wg().s[44]++;return nuevaLista;}/**
     * Método que dad una lista y una función, permite iterar en los elementos de la lista e invocar la función con cada uno de ellos
     * @param funcion Función aplicable en cada elemento
     */forEach(funcion){cov_2rb7x51wg().f[11]++;cov_2rb7x51wg().s[45]++;for(let i=(cov_2rb7x51wg().s[46]++,0);i<this.length();i++){const elemento=(cov_2rb7x51wg().s[47]++,this.get(i));cov_2rb7x51wg().s[48]++;funcion(elemento);}}}cov_2rb7x51wg().s[49]++;exports.Lista=Lista;let lista1=(cov_2rb7x51wg().s[50]++,new Lista([1]));let lista2=(cov_2rb7x51wg().s[51]++,new Lista([2,2]));let lista3=(cov_2rb7x51wg().s[52]++,new Lista([3,3,3]));let lista4=(cov_2rb7x51wg().s[53]++,new Lista([4,4,4,4]));let lista5=(cov_2rb7x51wg().s[54]++,new Lista([1,2,3,4,5,6]));cov_2rb7x51wg().s[55]++;lista1.append(lista2);cov_2rb7x51wg().s[56]++;console.log("Append: "+lista1.toString());let listas=(cov_2rb7x51wg().s[57]++,[lista3,lista4]);cov_2rb7x51wg().s[58]++;lista2.concatenate(listas);cov_2rb7x51wg().s[59]++;console.log("Concatenate: "+lista2.toString());cov_2rb7x51wg().s[60]++;console.log("Filter: "+lista5.filter(elemento=>{cov_2rb7x51wg().f[12]++;cov_2rb7x51wg().s[61]++;return elemento%2==0;}));cov_2rb7x51wg().s[62]++;console.log("Length: "+lista4.length());cov_2rb7x51wg().s[63]++;console.log("Map: "+lista4.map(elemento=>{cov_2rb7x51wg().f[13]++;cov_2rb7x51wg().s[64]++;return elemento/2;}));cov_2rb7x51wg().s[65]++;console.log("Reduce: "+lista5.reduce((acumulador,elemento)=>{cov_2rb7x51wg().f[14]++;cov_2rb7x51wg().s[66]++;return acumulador+elemento;},0));cov_2rb7x51wg().s[67]++;console.log("Reverse: "+lista5.reverse());cov_2rb7x51wg().s[68]++;console.log("For each: ");cov_2rb7x51wg().s[69]++;lista5.forEach(elemento=>{cov_2rb7x51wg().f[15]++;cov_2rb7x51wg().s[70]++;console.log(elemento*2);});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,