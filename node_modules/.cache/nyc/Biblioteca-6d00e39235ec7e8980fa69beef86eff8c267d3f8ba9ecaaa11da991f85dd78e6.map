{"version":3,"file":"/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicio-3/Biblioteca.ts","sources":["/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicio-3/Biblioteca.ts"],"names":[],"mappings":"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","sourcesContent":["import {Artista} from \"./Artista\";\nimport {Disco} from \"./Disco\";\nimport {Cancion} from \"./Cancion\";\n\n/**\n * Clase que representa una biblioteca musical\n * @class Biblioteca\n * @constructor new Biblioteca (artistas)\n * @param Artista[] artistas - Lista de artistas.\n */\nexport class Biblioteca {\n    private _artistas: Artista[];\n  \n    constructor(artistas: Artista[]) {\n      this._artistas = artistas;\n    }\n  \n    /**\n     * Obtiene la lista de los artistas.\n     */\n    get artistas(): Artista[] {\n      return this._artistas;\n    }\n    /**\n     * Establece la lista de artistas.\n     */\n    set artistas(value: Artista[]) {\n      this._artistas = value;\n    }\n  \n    /**\n     * Busca un artista por nombre y muestra sus detalles en consola.\n     * @param {string} nombre - Nombre del artista a buscar. \n     * @returns {void | undefined} - No devuelve nada.\n     */\n    searchArtist(nombre: string): void | undefined{\n        this._artistas.forEach((item: Artista) => {\n            if (item.nombre === nombre) console.table(item);\n        });\n        return undefined;\n    }\n\n    /**\n     * Busca un disco por nombre y muestra sus detalles en consola.\n     * @param {string} nombre - Nombre del disco a buscar.\n     * @returns {void | undefined} - No devuelve nada.\n     */\n    searchDisco(nombre: string): void | undefined{\n        this._artistas.forEach((item: Artista) => {\n            item.discografia.forEach((item2: Disco) =>{\n                if (item2.nombre === nombre) console.table(item2);\n            });\n        });\n        return undefined;\n    }\n\n    /**\n     * Busca una canci贸n por nombre y muestra sus detalles en consola.\n     * @param {string} nombre - Nombre de la canci贸n a buscar.\n     * @returns {void | undefined} - No devuelve nada.\n     */\n    searchCancion(nombre: string): void | undefined{\n        this._artistas.forEach((item: Artista) => {\n            item.discografia.forEach((item2: Disco) =>{\n                item2.canciones.forEach((item3: Cancion)=>{\n                    if (item3.nombre === nombre) console.table(item3);\n                });\n            });\n        });\n        return undefined;\n    }\n\n    /**\n     * Muestra la biblioteca completa de artistas, discos y canciones en consola.\n     * @returns {void} - No devuelve nada.\n     */\n    showBiblioteca(): void{\n        console.table(this._artistas);\n    }\n\n    /**\n     * Devuelve la cantidad de canciones de un disco especificado por nombre.\n     * @param {string} nombre - Nombre del disco.\n     * @returns {number} - Cantidad de canciones.\n     */\n    nsongs(nombre: string): number{\n        let result = 0;\n        this._artistas.forEach((item: Artista) => {\n            item.discografia.forEach((item2: Disco) =>{\n                if (item2.nombre === nombre) result = item2.canciones.length;\n            });\n        });\n        return result;\n    }\n\n    /**\n     * Devuelve la duraci贸n total de un disco especificado por nombre.\n     * @param {string} nombre - Nombre del disco.\n     * @returns {number} - Duraci贸n total en segundos.\n     */\n    duration(nombre: string): number{\n        let result = 0;\n        this._artistas.forEach((item: Artista) => {\n            item.discografia.forEach((item2: Disco) =>{\n                if (item2.nombre === nombre){\n                    item2.canciones.forEach((item3: Cancion) =>{\n                        result += item3.duracion\n                    })\n                }\n            });\n        });\n        return result;\n    }\n\n    /**\n     * Devuelve las reproducciones totales de un disco especificado por nombre.\n     * @param {string} nombre - Nombre del disco.\n     * @returns {number} - Reproducciones totales.\n     */\n    reproducciones(nombre: string): number{\n        let result = 0;\n        this._artistas.forEach((item: Artista) => {\n            item.discografia.forEach((item2: Disco) =>{\n                if (item2.nombre === nombre){\n                    item2.canciones.forEach((item3: Cancion) =>{\n                        result += item3.reproducciones\n                    })\n                }\n            });\n        });\n        return result;\n    }\n}"]}