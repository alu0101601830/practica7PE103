"use strict";function cov_isnwsp8kj(){var path="/home/usuario/practicas/practica7PE103/practica7PE103/src/ejercicio2PE103_p7/MetricLength.ts";var hash="b73ed0b00956189bea6f538afe8bfbbfad215b84";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/practicas/practica7PE103/practica7PE103/src/ejercicio2PE103_p7/MetricLength.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:30}},"2":{start:{line:4,column:25},end:{line:4,column:72}},"3":{start:{line:16,column:8},end:{line:16,column:28}},"4":{start:{line:23,column:8},end:{line:23,column:28}},"5":{start:{line:29,column:8},end:{line:29,column:27}},"6":{start:{line:36,column:8},end:{line:36,column:34}},"7":{start:{line:42,column:8},end:{line:42,column:33}},"8":{start:{line:49,column:8},end:{line:49,column:37}},"9":{start:{line:55,column:8},end:{line:55,column:36}},"10":{start:{line:62,column:23},end:{line:62,column:41}},"11":{start:{line:63,column:23},end:{line:63,column:68}},"12":{start:{line:64,column:8},end:{line:64,column:24}},"13":{start:{line:72,column:26},end:{line:72,column:41}},"14":{start:{line:73,column:8},end:{line:73,column:27}},"15":{start:{line:80,column:23},end:{line:80,column:65}},"16":{start:{line:81,column:8},end:{line:81,column:73}},"17":{start:{line:87,column:8},end:{line:87,column:54}},"18":{start:{line:94,column:8},end:{line:94,column:36}},"19":{start:{line:100,column:8},end:{line:100,column:50}},"20":{start:{line:107,column:8},end:{line:107,column:36}},"21":{start:{line:113,column:8},end:{line:113,column:52}},"22":{start:{line:120,column:8},end:{line:120,column:37}},"23":{start:{line:126,column:8},end:{line:126,column:52}},"24":{start:{line:129,column:0},end:{line:129,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:4},end:{line:15,column:5}},loc:{start:{line:15,column:23},end:{line:17,column:5}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:27},end:{line:24,column:5}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:22},end:{line:30,column:5}},line:28},"3":{name:"(anonymous_3)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:22},end:{line:37,column:5}},line:35},"4":{name:"(anonymous_4)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:17},end:{line:43,column:5}},line:41},"5":{name:"(anonymous_5)",decl:{start:{line:48,column:4},end:{line:48,column:5}},loc:{start:{line:48,column:26},end:{line:50,column:5}},line:48},"6":{name:"(anonymous_6)",decl:{start:{line:54,column:4},end:{line:54,column:5}},loc:{start:{line:54,column:21},end:{line:56,column:5}},line:54},"7":{name:"(anonymous_7)",decl:{start:{line:61,column:4},end:{line:61,column:5}},loc:{start:{line:61,column:23},end:{line:65,column:5}},line:61},"8":{name:"(anonymous_8)",decl:{start:{line:71,column:4},end:{line:71,column:5}},loc:{start:{line:71,column:35},end:{line:74,column:5}},line:71},"9":{name:"(anonymous_9)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:24},end:{line:82,column:5}},line:79},"10":{name:"(anonymous_10)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:19},end:{line:88,column:5}},line:86},"11":{name:"(anonymous_11)",decl:{start:{line:93,column:4},end:{line:93,column:5}},loc:{start:{line:93,column:20},end:{line:95,column:5}},line:93},"12":{name:"(anonymous_12)",decl:{start:{line:99,column:4},end:{line:99,column:5}},loc:{start:{line:99,column:15},end:{line:101,column:5}},line:99},"13":{name:"(anonymous_13)",decl:{start:{line:106,column:4},end:{line:106,column:5}},loc:{start:{line:106,column:22},end:{line:108,column:5}},line:106},"14":{name:"(anonymous_14)",decl:{start:{line:112,column:4},end:{line:112,column:5}},loc:{start:{line:112,column:17},end:{line:114,column:5}},line:112},"15":{name:"(anonymous_15)",decl:{start:{line:119,column:4},end:{line:119,column:5}},loc:{start:{line:119,column:22},end:{line:121,column:5}},line:119},"16":{name:"(anonymous_16)",decl:{start:{line:125,column:4},end:{line:125,column:5}},loc:{start:{line:125,column:17},end:{line:127,column:5}},line:125}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},b:{},inputSourceMap:{version:3,file:"/home/usuario/practicas/practica7PE103/practica7PE103/src/ejercicio2PE103_p7/MetricLength.ts",sources:["/home/usuario/practicas/practica7PE103/practica7PE103/src/ejercicio2PE103_p7/MetricLength.ts"],names:[],mappings:";;;AAAA,yEAAmE;AACnE;;;GAGG;AACH,MAAa,YAAY;IACb,MAAM,CAAS,CAAC,aAAa;IACrC;;;OAGG;IACH,YAAY,KAAa;QACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IACD;;;OAGG;IACH,eAAe,CAAC,KAAa;QACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IACD;;OAEG;IACH,eAAe;QACX,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,KAAa;QACpB,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC;IAC9B,CAAC;IACD;;OAEG;IACH,UAAU;QACN,OAAO,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,KAAa;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC;IACjC,CAAC;IACD;;OAEG;IACH,cAAc;QACV,OAAO,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,gBAAgB;QACZ,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;QACjC,IAAI,QAAQ,GAAG,IAAI,+BAAc,CAAC,QAAQ,CAAC,CAAA;QAC3C,OAAO,QAAQ,CAAC;IACpB,CAAC;IACD;;;;OAIG;IACH,oBAAoB,CAAC,QAAgB;QACjC,IAAI,WAAW,GAAG,QAAQ,GAAG,IAAI,CAAC;QAClC,OAAO,WAAW,CAAC;IACvB,CAAC;IACD;;;OAGG;IACH,YAAY,CAAC,KAAa;QACtB,IAAI,QAAQ,GAAG,IAAI,+BAAc,CAAC,KAAK,CAAC,CAAA;QACxC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;IACrE,CAAC;IACD;;OAEG;IACH,YAAY;QACR,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC,YAAY,EAAE,CAAC;IAClD,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAa;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC;IAChC,CAAC;IACD;;OAEG;IACH,QAAQ;QACJ,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,KAAa;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC;IAChC,CAAC;IACD;;OAEG;IACH,UAAU;QACN,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC,UAAU,EAAE,CAAC;IAChD,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,KAAa;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC;IACjC,CAAC;IACD;;OAEG;IACH,UAAU;QACN,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC,UAAU,EAAE,CAAC;IAChD,CAAC;CAEJ;AA9HD,oCA8HC",sourcesContent:["import {ImperialLength} from \"../ejercicio1PE103_p7/ImperialLength\"\n/**\n * Clase MetricLength para convertir n\xFAmeros en el sistema Metric\n * @class\n */\nexport class MetricLength{\n    private _valor: number; //centimetros\n    /**\n     * Constructor de MetricLength\n     * @param valor Valor inicial en centimetros de la clase\n     */\n    constructor(valor: number){\n        this._valor = valor;\n    }\n    /**\n     * Setter que pone el nuevo valor en la clase en centimetros\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_centimetros(nuevo: number){\n        this._valor = nuevo;\n    }\n    /**\n     * Getter que devuelve el valor en centimetros\n     */\n    get_centimetros(): number{\n        return this._valor;\n    }\n\n    /**\n     * Setter que pone el nuevo valor que lo transforma de metros a centimetros\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_metros(nuevo: number){\n        this._valor = 100 * nuevo;\n    }\n    /**\n     * Getter que devuelve el valor de centimetros a metros\n     */\n    get_metros(): number{\n        return this._valor / 100;\n    }\n\n    /**\n     * Setter que pone el nuevo valor que lo transforma de kilometros a centimetros\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_kilometros(nuevo: number){\n        this._valor = 100000 * nuevo;\n    }\n    /**\n     * Getter que devuelve el valor de centimetros a kilometros\n     */\n    get_kilometros(): number{\n        return this._valor / 100000;\n    }\n\n    /**\n     * M\xE9todo que crea una clase imperial con los datos de la clase metric\n     * @returns \n     */\n    metricToImperial(): ImperialLength{\n        let pulgadas = this._valor / 2.54\n        let imperial = new ImperialLength(pulgadas)\n        return imperial;\n    }\n    /**\n     * M\xE9todo que pasa de pulgadas a centimetros\n     * @param pulgadas \n     * @returns Las pulgadas en centimetros\n     */\n    pulgadasACentimetros(pulgadas: number): number{\n        let centimetros = pulgadas * 2.54;\n        return centimetros;\n    }\n    /**\n     * Setter que pone el nuevo valor en la clase en pulgadas\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_pulgadas(nuevo: number){\n        let imperial = new ImperialLength(nuevo)\n        this._valor = this.pulgadasACentimetros(imperial.get_pulgadas());\n    }\n    /**\n     * Getter que devuelve el valor en pulgadas\n     */\n    get_pulgadas(): number{\n        return this.metricToImperial().get_pulgadas();\n    }\n\n    /**\n     * Setter que pone el nuevo valor que lo transforma de pies a centimetros\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_pies(nuevo: number){\n        this._valor = nuevo * 30.48;\n    }\n    /**\n     * Getter que devuelve el valor de centimetros a pies\n     */\n    get_pies(): number{\n        return this.metricToImperial().get_pies();\n    }\n\n    /**\n     * Setter que pone el nuevo valor que lo transforma de yardas a centimetros\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_yardas(nuevo: number){\n        this._valor = 91.44 * nuevo;\n    }\n    /**\n     * Getter que devuelve el valor de centimetros a yardas\n     */\n    get_yardas(): number{\n        return this.metricToImperial().get_yardas();\n    }\n\n    /**\n     * Setter que pone el nuevo valor que lo transforma de millas a centimetros\n     * @param nuevo N\xFAmero que queremos que sea el nuevo valor\n     */\n    set_millas(nuevo: number){\n        this._valor = 160934 * nuevo;\n    }\n    /**\n     * Getter que devuelve el valor de centimetros a millas\n     */\n    get_millas(): number{\n        return this.metricToImperial().get_millas();\n    }\n\n}"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b73ed0b00956189bea6f538afe8bfbbfad215b84"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_isnwsp8kj=function(){return actualCoverage;};}return actualCoverage;}cov_isnwsp8kj();cov_isnwsp8kj().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_isnwsp8kj().s[1]++;exports.MetricLength=void 0;const ImperialLength_1=(cov_isnwsp8kj().s[2]++,require("../ejercicio1PE103_p7/ImperialLength"));/**
 * Clase MetricLength para convertir números en el sistema Metric
 * @class
 */class MetricLength{_valor;//centimetros
/**
     * Constructor de MetricLength
     * @param valor Valor inicial en centimetros de la clase
     */constructor(valor){cov_isnwsp8kj().f[0]++;cov_isnwsp8kj().s[3]++;this._valor=valor;}/**
     * Setter que pone el nuevo valor en la clase en centimetros
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_centimetros(nuevo){cov_isnwsp8kj().f[1]++;cov_isnwsp8kj().s[4]++;this._valor=nuevo;}/**
     * Getter que devuelve el valor en centimetros
     */get_centimetros(){cov_isnwsp8kj().f[2]++;cov_isnwsp8kj().s[5]++;return this._valor;}/**
     * Setter que pone el nuevo valor que lo transforma de metros a centimetros
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_metros(nuevo){cov_isnwsp8kj().f[3]++;cov_isnwsp8kj().s[6]++;this._valor=100*nuevo;}/**
     * Getter que devuelve el valor de centimetros a metros
     */get_metros(){cov_isnwsp8kj().f[4]++;cov_isnwsp8kj().s[7]++;return this._valor/100;}/**
     * Setter que pone el nuevo valor que lo transforma de kilometros a centimetros
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_kilometros(nuevo){cov_isnwsp8kj().f[5]++;cov_isnwsp8kj().s[8]++;this._valor=100000*nuevo;}/**
     * Getter que devuelve el valor de centimetros a kilometros
     */get_kilometros(){cov_isnwsp8kj().f[6]++;cov_isnwsp8kj().s[9]++;return this._valor/100000;}/**
     * Método que crea una clase imperial con los datos de la clase metric
     * @returns
     */metricToImperial(){cov_isnwsp8kj().f[7]++;let pulgadas=(cov_isnwsp8kj().s[10]++,this._valor/2.54);let imperial=(cov_isnwsp8kj().s[11]++,new ImperialLength_1.ImperialLength(pulgadas));cov_isnwsp8kj().s[12]++;return imperial;}/**
     * Método que pasa de pulgadas a centimetros
     * @param pulgadas
     * @returns Las pulgadas en centimetros
     */pulgadasACentimetros(pulgadas){cov_isnwsp8kj().f[8]++;let centimetros=(cov_isnwsp8kj().s[13]++,pulgadas*2.54);cov_isnwsp8kj().s[14]++;return centimetros;}/**
     * Setter que pone el nuevo valor en la clase en pulgadas
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_pulgadas(nuevo){cov_isnwsp8kj().f[9]++;let imperial=(cov_isnwsp8kj().s[15]++,new ImperialLength_1.ImperialLength(nuevo));cov_isnwsp8kj().s[16]++;this._valor=this.pulgadasACentimetros(imperial.get_pulgadas());}/**
     * Getter que devuelve el valor en pulgadas
     */get_pulgadas(){cov_isnwsp8kj().f[10]++;cov_isnwsp8kj().s[17]++;return this.metricToImperial().get_pulgadas();}/**
     * Setter que pone el nuevo valor que lo transforma de pies a centimetros
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_pies(nuevo){cov_isnwsp8kj().f[11]++;cov_isnwsp8kj().s[18]++;this._valor=nuevo*30.48;}/**
     * Getter que devuelve el valor de centimetros a pies
     */get_pies(){cov_isnwsp8kj().f[12]++;cov_isnwsp8kj().s[19]++;return this.metricToImperial().get_pies();}/**
     * Setter que pone el nuevo valor que lo transforma de yardas a centimetros
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_yardas(nuevo){cov_isnwsp8kj().f[13]++;cov_isnwsp8kj().s[20]++;this._valor=91.44*nuevo;}/**
     * Getter que devuelve el valor de centimetros a yardas
     */get_yardas(){cov_isnwsp8kj().f[14]++;cov_isnwsp8kj().s[21]++;return this.metricToImperial().get_yardas();}/**
     * Setter que pone el nuevo valor que lo transforma de millas a centimetros
     * @param nuevo Número que queremos que sea el nuevo valor
     */set_millas(nuevo){cov_isnwsp8kj().f[15]++;cov_isnwsp8kj().s[22]++;this._valor=160934*nuevo;}/**
     * Getter que devuelve el valor de centimetros a millas
     */get_millas(){cov_isnwsp8kj().f[16]++;cov_isnwsp8kj().s[23]++;return this.metricToImperial().get_millas();}}cov_isnwsp8kj().s[24]++;exports.MetricLength=MetricLength;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdXN1YXJpby9wcmFjdGljYXMvcHJhY3RpY2E3UEUxMDMvcHJhY3RpY2E3UEUxMDMvc3JjL2VqZXJjaWNpbzJQRTEwM19wNy9NZXRyaWNMZW5ndGgudHMiLCJzb3VyY2VzIjpbIi9ob21lL3VzdWFyaW8vcHJhY3RpY2FzL3ByYWN0aWNhN1BFMTAzL3ByYWN0aWNhN1BFMTAzL3NyYy9lamVyY2ljaW8yUEUxMDNfcDcvTWV0cmljTGVuZ3RoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlFQUFtRTtBQUNuRTs7O0dBR0c7QUFDSCxNQUFhLFlBQVk7SUFDYixNQUFNLENBQVMsQ0FBQyxhQUFhO0lBQ3JDOzs7T0FHRztJQUNILFlBQVksS0FBYTtRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsZUFBZSxDQUFDLEtBQWE7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUNEOztPQUVHO0lBQ0gsZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsVUFBVSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFDRDs7T0FFRztJQUNILFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxjQUFjLENBQUMsS0FBYTtRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUNEOztPQUVHO0lBQ0gsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGdCQUFnQjtRQUNaLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBO1FBQ2pDLElBQUksUUFBUSxHQUFHLElBQUksK0JBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMzQyxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNILG9CQUFvQixDQUFDLFFBQWdCO1FBQ2pDLElBQUksV0FBVyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDbEMsT0FBTyxXQUFXLENBQUM7SUFDdkIsQ0FBQztJQUNEOzs7T0FHRztJQUNILFlBQVksQ0FBQyxLQUFhO1FBQ3RCLElBQUksUUFBUSxHQUFHLElBQUksK0JBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxZQUFZO1FBQ1IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFDRDs7T0FFRztJQUNILFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxVQUFVLENBQUMsS0FBYTtRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUNEOztPQUVHO0lBQ0gsVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxLQUFhO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0NBRUo7QUE5SEQsb0NBOEhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbXBlcmlhbExlbmd0aH0gZnJvbSBcIi4uL2VqZXJjaWNpbzFQRTEwM19wNy9JbXBlcmlhbExlbmd0aFwiXG4vKipcbiAqIENsYXNlIE1ldHJpY0xlbmd0aCBwYXJhIGNvbnZlcnRpciBuw7ptZXJvcyBlbiBlbCBzaXN0ZW1hIE1ldHJpY1xuICogQGNsYXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRyaWNMZW5ndGh7XG4gICAgcHJpdmF0ZSBfdmFsb3I6IG51bWJlcjsgLy9jZW50aW1ldHJvc1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIGRlIE1ldHJpY0xlbmd0aFxuICAgICAqIEBwYXJhbSB2YWxvciBWYWxvciBpbmljaWFsIGVuIGNlbnRpbWV0cm9zIGRlIGxhIGNsYXNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmFsb3I6IG51bWJlcil7XG4gICAgICAgIHRoaXMuX3ZhbG9yID0gdmFsb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHRlciBxdWUgcG9uZSBlbCBudWV2byB2YWxvciBlbiBsYSBjbGFzZSBlbiBjZW50aW1ldHJvc1xuICAgICAqIEBwYXJhbSBudWV2byBOw7ptZXJvIHF1ZSBxdWVyZW1vcyBxdWUgc2VhIGVsIG51ZXZvIHZhbG9yXG4gICAgICovXG4gICAgc2V0X2NlbnRpbWV0cm9zKG51ZXZvOiBudW1iZXIpe1xuICAgICAgICB0aGlzLl92YWxvciA9IG51ZXZvO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgcXVlIGRldnVlbHZlIGVsIHZhbG9yIGVuIGNlbnRpbWV0cm9zXG4gICAgICovXG4gICAgZ2V0X2NlbnRpbWV0cm9zKCk6IG51bWJlcntcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHRlciBxdWUgcG9uZSBlbCBudWV2byB2YWxvciBxdWUgbG8gdHJhbnNmb3JtYSBkZSBtZXRyb3MgYSBjZW50aW1ldHJvc1xuICAgICAqIEBwYXJhbSBudWV2byBOw7ptZXJvIHF1ZSBxdWVyZW1vcyBxdWUgc2VhIGVsIG51ZXZvIHZhbG9yXG4gICAgICovXG4gICAgc2V0X21ldHJvcyhudWV2bzogbnVtYmVyKXtcbiAgICAgICAgdGhpcy5fdmFsb3IgPSAxMDAgKiBudWV2bztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0dGVyIHF1ZSBkZXZ1ZWx2ZSBlbCB2YWxvciBkZSBjZW50aW1ldHJvcyBhIG1ldHJvc1xuICAgICAqL1xuICAgIGdldF9tZXRyb3MoKTogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsb3IgLyAxMDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIHF1ZSBwb25lIGVsIG51ZXZvIHZhbG9yIHF1ZSBsbyB0cmFuc2Zvcm1hIGRlIGtpbG9tZXRyb3MgYSBjZW50aW1ldHJvc1xuICAgICAqIEBwYXJhbSBudWV2byBOw7ptZXJvIHF1ZSBxdWVyZW1vcyBxdWUgc2VhIGVsIG51ZXZvIHZhbG9yXG4gICAgICovXG4gICAgc2V0X2tpbG9tZXRyb3MobnVldm86IG51bWJlcil7XG4gICAgICAgIHRoaXMuX3ZhbG9yID0gMTAwMDAwICogbnVldm87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHRlciBxdWUgZGV2dWVsdmUgZWwgdmFsb3IgZGUgY2VudGltZXRyb3MgYSBraWxvbWV0cm9zXG4gICAgICovXG4gICAgZ2V0X2tpbG9tZXRyb3MoKTogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsb3IgLyAxMDAwMDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyBxdWUgY3JlYSB1bmEgY2xhc2UgaW1wZXJpYWwgY29uIGxvcyBkYXRvcyBkZSBsYSBjbGFzZSBtZXRyaWNcbiAgICAgKiBAcmV0dXJucyBcbiAgICAgKi9cbiAgICBtZXRyaWNUb0ltcGVyaWFsKCk6IEltcGVyaWFsTGVuZ3Roe1xuICAgICAgICBsZXQgcHVsZ2FkYXMgPSB0aGlzLl92YWxvciAvIDIuNTRcbiAgICAgICAgbGV0IGltcGVyaWFsID0gbmV3IEltcGVyaWFsTGVuZ3RoKHB1bGdhZGFzKVxuICAgICAgICByZXR1cm4gaW1wZXJpYWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcXVlIHBhc2EgZGUgcHVsZ2FkYXMgYSBjZW50aW1ldHJvc1xuICAgICAqIEBwYXJhbSBwdWxnYWRhcyBcbiAgICAgKiBAcmV0dXJucyBMYXMgcHVsZ2FkYXMgZW4gY2VudGltZXRyb3NcbiAgICAgKi9cbiAgICBwdWxnYWRhc0FDZW50aW1ldHJvcyhwdWxnYWRhczogbnVtYmVyKTogbnVtYmVye1xuICAgICAgICBsZXQgY2VudGltZXRyb3MgPSBwdWxnYWRhcyAqIDIuNTQ7XG4gICAgICAgIHJldHVybiBjZW50aW1ldHJvcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0dGVyIHF1ZSBwb25lIGVsIG51ZXZvIHZhbG9yIGVuIGxhIGNsYXNlIGVuIHB1bGdhZGFzXG4gICAgICogQHBhcmFtIG51ZXZvIE7Dum1lcm8gcXVlIHF1ZXJlbW9zIHF1ZSBzZWEgZWwgbnVldm8gdmFsb3JcbiAgICAgKi9cbiAgICBzZXRfcHVsZ2FkYXMobnVldm86IG51bWJlcil7XG4gICAgICAgIGxldCBpbXBlcmlhbCA9IG5ldyBJbXBlcmlhbExlbmd0aChudWV2bylcbiAgICAgICAgdGhpcy5fdmFsb3IgPSB0aGlzLnB1bGdhZGFzQUNlbnRpbWV0cm9zKGltcGVyaWFsLmdldF9wdWxnYWRhcygpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0dGVyIHF1ZSBkZXZ1ZWx2ZSBlbCB2YWxvciBlbiBwdWxnYWRhc1xuICAgICAqL1xuICAgIGdldF9wdWxnYWRhcygpOiBudW1iZXJ7XG4gICAgICAgIHJldHVybiB0aGlzLm1ldHJpY1RvSW1wZXJpYWwoKS5nZXRfcHVsZ2FkYXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgcXVlIHBvbmUgZWwgbnVldm8gdmFsb3IgcXVlIGxvIHRyYW5zZm9ybWEgZGUgcGllcyBhIGNlbnRpbWV0cm9zXG4gICAgICogQHBhcmFtIG51ZXZvIE7Dum1lcm8gcXVlIHF1ZXJlbW9zIHF1ZSBzZWEgZWwgbnVldm8gdmFsb3JcbiAgICAgKi9cbiAgICBzZXRfcGllcyhudWV2bzogbnVtYmVyKXtcbiAgICAgICAgdGhpcy5fdmFsb3IgPSBudWV2byAqIDMwLjQ4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgcXVlIGRldnVlbHZlIGVsIHZhbG9yIGRlIGNlbnRpbWV0cm9zIGEgcGllc1xuICAgICAqL1xuICAgIGdldF9waWVzKCk6IG51bWJlcntcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0cmljVG9JbXBlcmlhbCgpLmdldF9waWVzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIHF1ZSBwb25lIGVsIG51ZXZvIHZhbG9yIHF1ZSBsbyB0cmFuc2Zvcm1hIGRlIHlhcmRhcyBhIGNlbnRpbWV0cm9zXG4gICAgICogQHBhcmFtIG51ZXZvIE7Dum1lcm8gcXVlIHF1ZXJlbW9zIHF1ZSBzZWEgZWwgbnVldm8gdmFsb3JcbiAgICAgKi9cbiAgICBzZXRfeWFyZGFzKG51ZXZvOiBudW1iZXIpe1xuICAgICAgICB0aGlzLl92YWxvciA9IDkxLjQ0ICogbnVldm87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHRlciBxdWUgZGV2dWVsdmUgZWwgdmFsb3IgZGUgY2VudGltZXRyb3MgYSB5YXJkYXNcbiAgICAgKi9cbiAgICBnZXRfeWFyZGFzKCk6IG51bWJlcntcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0cmljVG9JbXBlcmlhbCgpLmdldF95YXJkYXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgcXVlIHBvbmUgZWwgbnVldm8gdmFsb3IgcXVlIGxvIHRyYW5zZm9ybWEgZGUgbWlsbGFzIGEgY2VudGltZXRyb3NcbiAgICAgKiBAcGFyYW0gbnVldm8gTsO6bWVybyBxdWUgcXVlcmVtb3MgcXVlIHNlYSBlbCBudWV2byB2YWxvclxuICAgICAqL1xuICAgIHNldF9taWxsYXMobnVldm86IG51bWJlcil7XG4gICAgICAgIHRoaXMuX3ZhbG9yID0gMTYwOTM0ICogbnVldm87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHRlciBxdWUgZGV2dWVsdmUgZWwgdmFsb3IgZGUgY2VudGltZXRyb3MgYSBtaWxsYXNcbiAgICAgKi9cbiAgICBnZXRfbWlsbGFzKCk6IG51bWJlcntcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0cmljVG9JbXBlcmlhbCgpLmdldF9taWxsYXMoKTtcbiAgICB9XG5cbn0iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,