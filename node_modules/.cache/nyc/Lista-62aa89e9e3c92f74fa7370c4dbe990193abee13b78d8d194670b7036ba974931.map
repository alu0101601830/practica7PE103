{"version":3,"file":"/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicio-2/Lista.ts","sources":["/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicio-2/Lista.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Clase Lista para tener una lista de cualquier tipo de datos\n * @class\n */\nexport class Lista<T> {\n    private _elementos: T[];\n    /**\n     * Constructor de Lista\n     * @param elementos Elementos de la lista\n     */\n    constructor(elementos: T[]) {\n        this._elementos = elementos;\n    }\n\n    /**\n     * Getter que devuelve los elementos de la lista\n     */\n    get elementos(): T[]{\n        return this._elementos;\n    }\n\n    /**\n     * Metodo para imprimir la lista\n     * @returns Devuelve una string con los elementos de la lista\n     */\n    toString(): string{\n        let result = \"[\"\n        for(let i = 0; i < this.length(); i++){\n            result += this._elementos[i]\n            if (i != this.length() - 1) result += \",\"\n        }\n        return result + \"]\";\n    }\n\n    /**\n     * Método para devolver el elemento en el indice introducido\n     * @param indice Indice del array de elementos\n     * @returns Contenido de elemento[indice]\n     */\n    get(indice: number): T {\n        return this.elementos[indice];\n    }\n\n    /**\n     * Método para anexar una lista al final de esta lista\n     * @param lista Lista para anexar\n     */\n    append(lista: Lista<T>): void {\n      let auxiliar = this.length()\n      for (let i = 0; i < lista.length(); i++) {\n        this._elementos[auxiliar + i] = lista.get(i)\n      }\n    }\n  \n    /**\n     * Método para concatenar varias listas a esta lista\n     * @param listas Listas para anexar a esta lista\n     * @returns Esta lista con todas las listas anexadas\n     */\n    concatenate(listas: Lista<T>[]): Lista<T> {\n      for (const lista of listas) {\n        this.append(lista);\n      }\n      return this;\n    }\n\n    /**\n     * Método para aplicar un predicado lógico a esta lista\n     * @param predicado Predicado lógico que debe de cumplir\n     * @returns Una lista con todos los elementos de la lista inicial para los cuales el predicado lógio es verdadero\n     */\n    filter(predicado: (elemento: T) => boolean): Lista<T> {\n      const nuevaLista = new Lista<T>([]);\n      for (let i = 0; i < this.length(); i++) {\n        const elemento = this.get(i);\n        if (predicado(elemento)) nuevaLista.append(new Lista<T>([elemento]));\n      }\n      return nuevaLista;\n    }\n    \n    /**\n     * Método que devuelve la longitud de la lista\n     * @returns Número con la longitud de la lista\n     */\n    length(): number{\n        let i = 0;\n        while (this.get(i) != null){\n            i++;\n        }\n        return i\n    }\n\n    /**\n     * Dada una lista y una función, retorna la lista resultante de aplicar a cada elemento de la lista inicial la función\n     * @param funcion Función que debe aplicarse\n     * @returns Lista resultante de aplicar a cada elemento de la lista inicial la función\n     */\n    map<U>(funcion: (elemento: T) => U): Lista<U> {\n      const nuevaLista = new Lista<U>([]);\n      for (let i = 0; i < this.length(); i++) {\n        nuevaLista.append(new Lista<U>([funcion(this.get(i))]));\n      }\n      return nuevaLista;\n    }\n  \n    /**\n     * Método que dada una lista, una función y un acumulador inicial, reduce cada elemento al acumulador utilizando la función\n     * @param funcion Funcón para aplicar a cada elemento\n     * @param acumulador Acumulador inicial\n     * @returns La lista resultante\n     */\n    reduce(funcion: (acumulador: T, elemento: T) => T, acumulador: T): T {\n      let resultado = acumulador;\n      for (let i = 0; i < this.length(); i++) {\n        resultado = funcion(resultado, this.get(i));\n      }\n      return resultado;\n    }\n  \n    /**\n     * Método que revierte la lista\n     * @returns Lista revertida\n     */\n    reverse(): Lista<T> {\n      const nuevaLista = new Lista<T>([]);\n      for (let i = this.length() - 1; i >= 0; i--) {\n        nuevaLista.append(new Lista<T>([this.get(i)]));\n      }\n      return nuevaLista;\n    }\n\n    /**\n     * Método que dada una lista y una función, permite iterar en los elementos de la lista e invocar la función con cada uno de ellos\n     * @param funcion Función aplicable en cada elemento\n     */\n    forEach(funcion: (elemento: T) => void): void {\n        for (let i = 0; i < this.length(); i++) {\n          const elemento = this.get(i);\n          funcion(elemento);\n        }\n    }\n      \n  }\n\n  let lista1 = new Lista<number>([1])\n  let lista2 = new Lista<number>([2,2])\n  let lista3 = new Lista<number>([3,3,3])\n  let lista4 = new Lista<number>([4,4,4,4])\n  let lista5 = new Lista<number>([1,2,3,4,5,6])\n  lista1.append(lista2)\n  console.log(\"Append: \"+lista1.toString())\n  let listas = [lista3, lista4]\n  lista2.concatenate(listas)\n  console.log(\"Concatenate: \"+lista2.toString())\n  console.log(\"Filter: \"+lista5.filter(elemento => elemento % 2 == 0))\n  console.log(\"Length: \"+lista4.length())\n  console.log(\"Map: \" + lista4.map(elemento => elemento/2))\n  console.log(\"Reduce: \" + lista5.reduce((acumulador, elemento) => acumulador + elemento, 0))\n  console.log(\"Reverse: \" + lista5.reverse())\n  console.log(\"For each: \")\n  lista5.forEach((elemento) => {\n    console.log(elemento * 2)\n  })"]}