{"version":3,"file":"/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicioPE103/SearchableCollection.ts","sources":["/home/usuario/practicas/practica6/ull-esit-inf-dsi-22-23-prct06-generics-solid-alu0101601830/src/ejercicioPE103/SearchableCollection.ts"],"names":[],"mappings":";;;AAGA;;;;GAIG;AACH,MAAsB,oBAAoB;IACtC;;;OAGG;IACO,UAAU,CAAM;IAE1B;;;OAGG;IACH,YAAY,UAAe;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IACD;;;;OAIG;IACH,OAAO,CAAC,IAAO;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IACD;;;;OAIG;IACH,OAAO,CAAC,IAAY;QAChB,IAAI,IAAI,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAAE,OAAO,SAAS,CAAA;QACrD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;IAChC,CAAC;IACD;;;;OAIG;IACH,UAAU,CAAC,IAAY;QACnB,IAAI,IAAI,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAAE,OAAO,SAAS,CAAA;QACrD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAA;QACrC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC7B,CAAC;IACD;;;OAGG;IACH,gBAAgB;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;IAClC,CAAC;CAOJ;AAtDD,oDAsDC","sourcesContent":["import {Collectable} from \"./Collectable\"\nimport {Searchable} from \"./Searchable\"\n\n/**\n * Clase abstracta que representa una colección de items\n * @template T El tipo de item en la colección\n * @class\n */\nexport abstract class SearchableCollection<T> implements Collectable<T>, Searchable<T> {\n    /**\n     * La colección de items\n     * @protected\n     */\n    protected collection: T[];\n\n    /**\n     * Crea una nueva instancia de SearchableCollection\n     * @param collection La colección de items que estará dentro de la colección\n     */\n    constructor(collection: T[]) {\n        this.collection = collection;\n    }\n    /**\n     * Añade un item\n     * @param {T} Un item\n     * @returns {void}\n     */\n    addItem(item: T): void{\n        this.collection.push(item);\n    }\n    /**\n     * Devuelve el item\n     * @param {item} La posicion del item\n     * @returns {T} Te devuelve el item correspondiente\n     */\n    getItem(item: number): T | undefined{\n        if (item >= this.getNumberOfItems()) return undefined\n        return this.collection[item]\n    }\n    /**\n     * Elimina un item\n     * @param {item} La posicion del item\n     * @returns {void}\n     */\n    removeItem(item: number): T | undefined{\n        if (item >= this.getNumberOfItems()) return undefined\n        this.collection.slice(item, item + 1)\n        return this.getItem(item)\n    }\n    /**\n     * Devuelve el número total de la colección\n     * @returns {number} Número total de items\n     */\n    getNumberOfItems(): number{\n        return this.collection.length;\n    }\n    /**\n     * Busca un tipo que se desconoce a priori\n     * @param {T} Elemento a buscar\n     * @returns {T[]} Array con todas las ocurrencias del elemento\n     */\n    abstract search(item: T): T[];\n}"]}